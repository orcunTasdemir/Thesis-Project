
Check if the food is actually deleting
Turn it into tensors




agent is complete
neural network is complete

import numpy as np
import pandas as pd

import keras
from keras.models import Sequential
from keras.layers import Dense

class NeuralNetwork:

    def __init__(self,
                 model : Sequential = Sequential(),
                 hidden_layer_nodes : int = 5,        
                 hidden_activation : str = "relu",
                 output_activation : str = "softmax"):
        #Neural network for the food gathering agents
        #the input layer is going to have a dimension of 2 for
        #the angle and the distance of the food  
        self.model = model
        #adding the input layer, we will also have a 3 dimensional hidden layer
        self.model.add(Dense(hidden_layer_nodes, input_dim = 2, activation = hidden_activation))
        #adding the output layer
        self.model.add(Dense(2, activation = output_activation))


        #example distances for the agent to perceive
        # data1 = np.array([[1, 2]]) #one units to the right, 2 units down
        # data2 = np.array([-1, -2]) #one units to the left, 2 units up

n = NeuralNetwork()
print(n.model.layers)

n = NeuralNetwork()
print(n.model.layers)

worked with random weights
old neural network that worked
import numpy as np
import pandas as pd
from random import sample
import keras
from keras.models import Sequential
from keras.layers import Dense

#class MyModel(tf.keras.Model):

# def __init__(self):
# super(MyModel, self).__init__()
# self.dense1 = tf.keras.layers.Dense(4, activation=tf.nn.relu)
# self.dense2 = tf.keras.layers.Dense(5, activation=tf.nn.softmax)

class NeuralNetwork(keras.Model):
    #Neural network for the food gathering agents
    #the input layer is going to have a dimension of 2 for
    #the angle and the distance of the food
    num_of_mutations = 5

    def __init__(self):
        super(NeuralNetwork, self).__init__()
        self.model = Sequential()
        #adding the input layer, we will also have a 3 dimensional hidden layer
        self.model.add(Dense(5, input_dim=2, activation="relu", kernel_initializer= 'random_normal'))
        #adding the output layer
        self.model.add(Dense(2, activation="sigmoid"))

        #example distances for the agent to perceive
        # data1 = np.array([[1, 2]]) #one units to the right, 2 units down
        # data2 = np.array([-1, -2]) #one units to the left, 2 units up

    def genetic_mutation(self, num_of_mutations):
        #27 nodes that we can genetically mutate
        nodes_to_select = list(range(1,28))
        nodes_selected = sample(nodes_to_select,num_of_mutations)
        #WRITE THIS NEXT
        

# keras.Model

# n = NeuralNetwork()

# print(n.model.predict([[0,1]]))